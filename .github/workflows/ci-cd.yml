name: CI/CD to Amazon ECR and ECS

on:
  push:
    branches: [ main ]

permissions:
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: aicp-claims-api-container
  CLUSTER_NAME: aicp-ecs-cluster
  SERVICE_NAME: aicp-claims-api-task-service-m7a6lold

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image (latest + sha)
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_LATEST: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          IMAGE_SHA: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        run: |
          docker build -t "$IMAGE_LATEST" -t "$IMAGE_SHA" .
          docker push "$IMAGE_LATEST"
          docker push "$IMAGE_SHA"
          echo "IMAGE_URI=$IMAGE_LATEST" >> $GITHUB_ENV

      - name: Ensure CloudWatch log group exists (optional)
        run: aws logs create-log-group --log-group-name /ecs/aicp-claims-api || true

      # Compute a default port if secret not set
      - name: Set default Redshift port
        shell: bash
        run: |
          if [ -z "${{ secrets.REDSHIFT_PORT }}" ]; then
            echo "RS_PORT=5439" >> $GITHUB_ENV
          else
            echo "RS_PORT=${{ secrets.REDSHIFT_PORT }}" >> $GITHUB_ENV
          fi

      # âœ… Official renderer (no jq/CRLF headaches)
      - name: Render Amazon ECS task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: aicp-claims-api
          image: ${{ env.IMAGE_URI }}
          environment-variables: |
            REDSHIFT_HOST=${{ secrets.REDSHIFT_HOST }}
            REDSHIFT_DB=${{ secrets.REDSHIFT_DB }}
            REDSHIFT_USER=${{ secrets.REDSHIFT_USER }}
            REDSHIFT_PASSWORD=${{ secrets.REDSHIFT_PASSWORD }}
            REDSHIFT_PORT=${{ env.RS_PORT }}

      - name: Register task definition
        env:
          RENDERED: ${{ steps.render.outputs.task-definition }}
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://$RENDERED \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "Registered: $TASK_DEF_ARN"

      - name: Deploy to ECS (force new deployment)
        run: |
          aws ecs update-service \
            --cluster "${{ env.CLUSTER_NAME }}" \
            --service "${{ env.SERVICE_NAME }}" \
            --task-definition "${{ env.TASK_DEF_ARN }}" \
            --force-new-deployment \
            --region "${{ env.AWS_REGION }}"

      - name: Send Email Notification
        if: always()
        continue-on-error: true
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}   # Gmail App Password
          subject: GitHub Actions CI/CD - ${{ job.status }}
          to: mm.cloudenginner@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            The CI/CD pipeline for your AICP Claims API has completed.
            Status: ${{ job.status }}
            Image:  ${{ env.IMAGE_URI }}
            Task:   ${{ env.TASK_DEF_ARN }}
